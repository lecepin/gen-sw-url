{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inData","outData","tip","_this2","_this$state","_react_16_7_0_react_default","a","createElement","className","AppBar_default","position","Typography_default","variant","color","TextField_default","fullWidth","label","multiline","rows","value","onChange","e","setState","target","margin","helperText","Button_default","onClick","matchData","match","Array","isArray","map","item","replace","indexOf","concat","join","ClickAwayListener_default","onClickAway","Tooltip_default","PopperProps","disablePortal","onClose","open","disableFocusListener","disableHoverListener","disableTouchListener","placement","title","Clipboard","cDom","document","querySelector","setAttribute","click","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3e035a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Clipboard from \"clipboard\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inData: \"\",\n      outData: \"\",\n      tip: false\n    };\n  }\n\n  render() {\n    const { inData, outData, tip } = this.state;\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            PreCache资源提取\n          </Typography>\n        </AppBar>\n        <TextField\n          className=\"input-textA\"\n          fullWidth\n          label=\"网页代码\"\n          multiline\n          rows=\"15\"\n          value={inData}\n          onChange={e => this.setState({ inData: e.target.value })}\n          margin=\"normal\"\n          helperText=\"粘贴代码到此处\"\n          variant=\"outlined\"\n        />\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            const matchData = inData.match(\n              /\\\"(https:)?\\/\\/.+alicdn.+\\.(js|css)(\\?.*?)?\\\"/gm\n            );\n            if (Array.isArray(matchData)) {\n              this.setState({\n                outData:\n                  \"\\t\" +\n                  matchData\n                    .map(item => {\n                      item = item.replace(/\"/g, \"\");\n                      if (item.indexOf(\"//\") === 0) {\n                        item = `https:${item}`;\n                      }\n                      return `\\\"${item}\\\"`;\n                    })\n                    .join(\",\\n\\t\")\n              });\n            }\n          }}\n        >\n          提取\n        </Button>\n        {outData && (\n          <ClickAwayListener onClickAway={() => this.setState({ tip: false })}>\n            <Tooltip\n              PopperProps={{\n                disablePortal: true\n              }}\n              onClose={() => this.setState({ tip: false })}\n              open={tip}\n              disableFocusListener\n              disableHoverListener\n              disableTouchListener\n              placement=\"right\"\n              title=\"已复制\"\n            >\n              <Button\n                className=\"App-copy\"\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  new Clipboard(\".App-copy\");\n                  const cDom = document.querySelector(\".App-copy\");\n                  if (!cDom) return;\n                  cDom.setAttribute(\"data-clipboard-text\", this.state.outData);\n                  cDom.click();\n                  this.setState({ tip: true });\n                }}\n              >\n                复制\n              </Button>\n            </Tooltip>\n          </ClickAwayListener>\n        )}\n\n        <TextField\n          className=\"input-textA\"\n          fullWidth\n          label=\"提取结果\"\n          multiline\n          rows=\"8\"\n          value={outData}\n          onChange={e => this.setState({ outData: e.target.value })}\n          margin=\"normal\"\n          helperText=\"复制此处代码(请注意带可变时间戳的资源)\"\n          variant=\"outlined\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}